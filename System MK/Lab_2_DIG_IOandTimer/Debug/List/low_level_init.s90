//////////////////////////////////////////////////////////////////////////////
//                                                                           /
//                                                     09/Feb/2008  18:10:39 /
// IAR Atmel AVR C/C++ Compiler V4.20A/W32, Evaluation Version               /
// Copyright 1996-2006 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Source file  =  C:\Documents and Settings\Serg\SERG_DOCUM\_œ–√–¿ÃÃ¿    /
//                    »Õ—“»“”“\LABORATOR_WORKS\Lab_2_DIG_IOandTimer\low_leve /
//                    l_init.c                                               /
//    Command line =  "C:\Documents and Settings\Serg\SERG_DOCUM\_œ–√–¿ÃÃ¿   /
//                    »Õ—“»“”“\LABORATOR_WORKS\Lab_2_DIG_IOandTimer\low_leve /
//                    l_init.c" --cpu=m8 -ms -o "C:\Documents and            /
//                    Settings\Serg\SERG_DOCUM\_œ–√–¿ÃÃ¿                     /
//                    »Õ—“»“”“\LABORATOR_WORKS\Lab_2_DIG_IOandTimer\Debug\Ob /
//                    j\" -lC "C:\Documents and Settings\Serg\SERG_DOCUM\_œ– /
//                    √–¿ÃÃ¿ »Õ—“»“”“\LABORATOR_WORKS\Lab_2_DIG_IOandTimer\D /
//                    ebug\List\" -lA "C:\Documents and                      /
//                    Settings\Serg\SERG_DOCUM\_œ–√–¿ÃÃ¿                     /
//                    »Õ—“»“”“\LABORATOR_WORKS\Lab_2_DIG_IOandTimer\Debug\Li /
//                    st\" --initializers_in_flash -z9                       /
//                    --cross_call_passes=3 --debug                          /
//                    -DENABLE_BIT_DEFINITIONS --do_cross_call -e -I         /
//                    "C:\Program Files\IAR Systems\Embedded Workbench 4.0   /
//                    Evaluation\avr\INC\" -I "C:\Program Files\IAR          /
//                    Systems\Embedded Workbench 4.0                         /
//                    Evaluation\avr\INC\CLIB\" --eeprom_size 512            /
//    List file    =  C:\Documents and Settings\Serg\SERG_DOCUM\_œ–√–¿ÃÃ¿    /
//                    »Õ—“»“”“\LABORATOR_WORKS\Lab_2_DIG_IOandTimer\Debug\Li /
//                    st\low_level_init.s90                                  /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME low_level_init

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__cpu", "1"
        RTMODEL "__cpu_name", "ATmega8"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        PUBWEAK _A_PORTB
        PUBWEAK _A_PORTC
        PUBWEAK _A_PORTD
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBLIC __low_level_init
        FUNCTION __low_level_init,0201H
        LOCFRAME RSTACK, 2, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_Y Y DATA
        CFI StackFrame CFA_SP SP DATA
        CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
        CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
        CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
        CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
        CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
        CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
        CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
        CFI ResourceParts SP SPH, SPL
        CFI ResourceParts Y R29, R28
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign 1
        CFI ReturnAddress ?Ret CODE
        CFI CFA_Y Y+0
        CFI CFA_SP SP+2
        CFI ?RetPad 0
        CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
        CFI ?RetLow Frame(CFA_SP, 0)
        CFI ?Ret Concat
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 SameValue
        CFI R13 SameValue
        CFI R14 SameValue
        CFI R15 SameValue
        CFI R16 Undefined
        CFI R17 Undefined
        CFI R18 Undefined
        CFI R19 Undefined
        CFI R20 Undefined
        CFI R21 Undefined
        CFI R22 Undefined
        CFI R23 Undefined
        CFI R24 SameValue
        CFI R25 SameValue
        CFI R26 SameValue
        CFI R27 SameValue
        CFI R28 Undefined
        CFI R29 Undefined
        CFI R30 Undefined
        CFI R31 Undefined
        CFI ?RetHighByteMask SameValue
        CFI SPH Undefined
        CFI SPL Undefined
        CFI EndCommon cfiCommon0
        
// C:\Documents and Settings\Serg\SERG_DOCUM\_œ–√–¿ÃÃ¿ »Õ—“»“”“\LABORATOR_WORKS\Lab_2_DIG_IOandTimer\low_level_init.c
//    1 /**************************************************************
//    2  **             - __low_level_init.c -
//    3  **
//    4  **     Special initializations that are performed before
//    5  **     segment initialization. It is also possible to
//    6  **     completely block the normal segment initialization.
//    7  **
//    8  **     Used with iccAVR.
//    9  **
//   10  **     $Revision: 1.2 $
//   11  **
//   12  **************************************************************/
//   13 #include <inavr.h>
//   14 
//   15 //// ÔÓ‰ÍÎ˛˜ËÏ ‚ÒÂ ˜ÚÓ ÌÛÊÌÓ...
//   16 //// Á‡‰‡ÂÏÒˇ ÍÓÌÚÓÎÎÂÓÏ Ò ÍÓÚÓ˚Ï ‡·ÓÚ‡ÂÏ
//   17 #include "Header.h"

        ASEGN ABSOLUTE:DATA:NOROOT,032H
// union <unnamed> volatile __io _A_PORTD
_A_PORTD:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,035H
// union <unnamed> volatile __io _A_PORTC
_A_PORTC:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,038H
// union <unnamed> volatile __io _A_PORTB
_A_PORTB:
        DS 1
//   18 
//   19 extern void *__RSTACK_in_external_ram;
//   20 
//   21 /**************************************************************
//   22  **
//   23  ** How to implement a low-level initialization function in C
//   24  ** =========================================================
//   25  **
//   26  ** 1) Only use local auto variables.
//   27  ** 2) Don't use global or static variables.
//   28  ** 3) Don't use global or static objects (EC++ only).
//   29  ** 4) Don't use agregate initializers, e.g. struct a b = {1};
//   30  ** 5) Don't call any library functions (function calls that
//   31  **    the compiler generates, e.g. to do integer math, are OK).
//   32  ** 6) Setup the RSTACK as is appropriate! See code below.
//   33  **
//   34  **************************************************************/
//   35 #ifdef __cplusplus
//   36 extern "C" {
//   37 #endif

        RSEG CODE:CODE:NOROOT(1)
//   38 char __low_level_init()
__low_level_init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function __low_level_init
//   39 {
//   40   /* Uncomment the statement below if the RSTACK */
//   41   /* segment has been placed in external SRAM!   */
//   42 
//   43   /* __require(__RSTACK_in_external_ram); */
//   44 
//   45   /* If the low-level initialization routine is  */
//   46   /* written in assembler, the line above should */
//   47   /* be written as:                              */
//   48   /*     EXTERN  __RSTACK_in_external_ram        */
//   49   /*     REQUIRE __RSTACK_in_external_ram        */
//   50 
//   51   /* Add your custom setup here. */
//   52   ////////////////////////////////////////
//   53   /// Ì‡ÒÚÓËÏ ÔÓÚ˚ ‰Îˇ ‡·ÓÚ˚
//   54    PORTB = 0xFF;
        LDI     R16, 255
        OUT     0x18, R16
//   55    PORTC = 0xFF;
        OUT     0x15, R16
//   56    PORTD = 0xFF;
        OUT     0x12, R16
//   57 
//   58   /* Return 1 to indicate that normal segment */
//   59   /* initialization should be performed. If   */
//   60   /* normal segment initialization should not */
//   61   /* be performed, return 0.                  */
//   62   return 1;
        LDI     R16, 1
        RET
        CFI EndBlock cfiBlock0
//   63 }

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        END
//   64 #ifdef __cplusplus
//   65 }
//   66 #endif
//   67 
// 
//  3 bytes in segment ABSOLUTE
// 12 bytes in segment CODE
// 
// 12 bytes of CODE memory
//  0 bytes of DATA memory (+ 3 bytes shared)
//
//Errors: none
//Warnings: none
