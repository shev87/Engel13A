//////////////////////////////////////////////////////////////////////////////
//                                                                           /
//                                                     29/Feb/2008  23:49:02 /
// IAR Atmel AVR C/C++ Compiler V4.20A/W32, Evaluation Version               /
// Copyright 1996-2006 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Source file  =  C:\Documents and Settings\Serg\SERG_DOCUM\_ПРГРАММА    /
//                    ИНСТИТУТ\LABORATOR_WORKS\LAB_4_Timer_0\main_.c         /
//    Command line =  "C:\Documents and Settings\Serg\SERG_DOCUM\_ПРГРАММА   /
//                    ИНСТИТУТ\LABORATOR_WORKS\LAB_4_Timer_0\main_.c"        /
//                    --cpu=m8 -ms -o "C:\Documents and                      /
//                    Settings\Serg\SERG_DOCUM\_ПРГРАММА                     /
//                    ИНСТИТУТ\LABORATOR_WORKS\LAB_4_Timer_0\Debug\Obj\"     /
//                    -lCN "C:\Documents and Settings\Serg\SERG_DOCUM\_ПРГРА /
//                    ММА ИНСТИТУТ\LABORATOR_WORKS\LAB_4_Timer_0\Debug\List\ /
//                    " -lA "C:\Documents and Settings\Serg\SERG_DOCUM\_ПРГР /
//                    АММА ИНСТИТУТ\LABORATOR_WORKS\LAB_4_Timer_0\Debug\List /
//                    \" --initializers_in_flash -z9 --cross_call_passes=3   /
//                    --debug -DENABLE_BIT_DEFINITIONS --do_cross_call -e    /
//                    -I "C:\Program Files\IAR Systems\Embedded Workbench    /
//                    4.0 Evaluation\avr\INC\" -I "C:\Program Files\IAR      /
//                    Systems\Embedded Workbench 4.0                         /
//                    Evaluation\avr\INC\CLIB\" --eeprom_size 512            /
//    List file    =  C:\Documents and Settings\Serg\SERG_DOCUM\_ПРГРАММА    /
//                    ИНСТИТУТ\LABORATOR_WORKS\LAB_4_Timer_0\Debug\List\main /
//                    _.s90                                                  /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME main_

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__cpu", "1"
        RTMODEL "__cpu_name", "ATmega8"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        PUBWEAK `??Timer_0_ovfEVENT??INTVEC 18`
        PUBLIC Timer_0_ovfEVENT
        FUNCTION Timer_0_ovfEVENT,0233H
        LOCFRAME CSTACK, 3, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBWEAK _A_DDRD
        PUBWEAK _A_PORTB
        PUBWEAK _A_PORTC
        PUBWEAK _A_PORTD
        PUBWEAK _A_TCCR0
        PUBWEAK _A_TIFR
        PUBWEAK _A_TIMSK
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBLIC init_Timer_0
        FUNCTION init_Timer_0,0203H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC main
        FUNCTION main,021a03H
        LOCFRAME RSTACK, 2, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_Y Y DATA
        CFI StackFrame CFA_SP SP DATA
        CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
        CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
        CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
        CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
        CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
        CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
        CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
        CFI ResourceParts SP SPH, SPL
        CFI ResourceParts Y R29, R28
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign 1
        CFI ReturnAddress ?Ret CODE
        CFI CFA_Y Y+0
        CFI CFA_SP SP+2
        CFI ?RetPad 0
        CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
        CFI ?RetLow Frame(CFA_SP, 0)
        CFI ?Ret Concat
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 SameValue
        CFI R13 SameValue
        CFI R14 SameValue
        CFI R15 SameValue
        CFI R16 Undefined
        CFI R17 Undefined
        CFI R18 Undefined
        CFI R19 Undefined
        CFI R20 Undefined
        CFI R21 Undefined
        CFI R22 Undefined
        CFI R23 Undefined
        CFI R24 SameValue
        CFI R25 SameValue
        CFI R26 SameValue
        CFI R27 SameValue
        CFI R28 Undefined
        CFI R29 Undefined
        CFI R30 Undefined
        CFI R31 Undefined
        CFI ?RetHighByteMask SameValue
        CFI SPH Undefined
        CFI SPL Undefined
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign 1
        CFI ReturnAddress ?Ret CODE
        CFI CFA_Y Y+0
        CFI CFA_SP SP+2
        CFI ?RetPad 0
        CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
        CFI ?RetLow Frame(CFA_SP, 0)
        CFI ?Ret Concat
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 SameValue
        CFI R13 SameValue
        CFI R14 SameValue
        CFI R15 SameValue
        CFI R16 SameValue
        CFI R17 SameValue
        CFI R18 SameValue
        CFI R19 SameValue
        CFI R20 SameValue
        CFI R21 SameValue
        CFI R22 SameValue
        CFI R23 SameValue
        CFI R24 SameValue
        CFI R25 SameValue
        CFI R26 SameValue
        CFI R27 SameValue
        CFI R28 Undefined
        CFI R29 Undefined
        CFI R30 SameValue
        CFI R31 SameValue
        CFI ?RetHighByteMask SameValue
        CFI SPH Undefined
        CFI SPL Undefined
        CFI EndCommon cfiCommon1
        
Timer_0_ovfEVENT    SYMBOL "Timer_0_ovfEVENT"
`??Timer_0_ovfEVENT??INTVEC 18` SYMBOL "??INTVEC 18", Timer_0_ovfEVENT

// C:\Documents and Settings\Serg\SERG_DOCUM\_ПРГРАММА ИНСТИТУТ\LABORATOR_WORKS\LAB_4_Timer_0\main_.c
//    1 #include "Header.h"

        ASEGN ABSOLUTE:DATA:NOROOT,031H
// union <unnamed> volatile __io _A_DDRD
_A_DDRD:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,032H
// union <unnamed> volatile __io _A_PORTD
_A_PORTD:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,035H
// union <unnamed> volatile __io _A_PORTC
_A_PORTC:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,038H
// union <unnamed> volatile __io _A_PORTB
_A_PORTB:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,053H
// union <unnamed> volatile __io _A_TCCR0
_A_TCCR0:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,058H
// union <unnamed> volatile __io _A_TIFR
_A_TIFR:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,059H
// union <unnamed> volatile __io _A_TIMSK
_A_TIMSK:
        DS 1
//    2 
//    3 /// Можно определить маску для работы с нужными битами
//    4 #define DIG_OUT_MASK  ((1<<PD5)|(1<<PD6)|(1<<PD7))
//    5 
//    6 
//    7 // Процедура настройки таймера 0

        RSEG CODE:CODE:NOROOT(1)
//    8 void init_Timer_0(void)
init_Timer_0:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function init_Timer_0
//    9 {
//   10   TCCR0 = (1<<CS02)|(1<<CS00);  // Timer Clock = system clock / 1024
        LDI     R16, 5
        OUT     0x33, R16
//   11 // сбросим флаг переполнения если установлен
//   12   TIFR  = 1<<TOV0;		// Clear TOV0 / Clear pending interrupts
        LDI     R16, 1
        OUT     0x38, R16
//   13 // разрешаем прерывания от события переполнение таймера 0
//   14   TIMSK = 1<<TOIE0;             // Enable Timer 0 Overflow Interrupt
        OUT     0x39, R16
//   15 }
        RET
        CFI EndBlock cfiBlock0
//   16 
//   17 
//   18 // процедура прерывания
//   19 /// формирует меандр на PD5 и PD7 период = 2*system_clock/1024/356
//   20 #pragma vector=TIMER0_OVF_vect

        RSEG CODE:CODE:NOROOT(1)
//   21 __interrupt void Timer_0_ovfEVENT(void)
Timer_0_ovfEVENT:
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function Timer_0_ovfEVENT
//   22 {
        ST      -Y, R18
        CFI R18 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
        ST      -Y, R17
        CFI R17 Frame(CFA_Y, -2)
        CFI CFA_Y Y+2
        ST      -Y, R16
        CFI R16 Frame(CFA_Y, -3)
        CFI CFA_Y Y+3
        IN      R18, 0x3F
//   23   PORTD ^= ((1<<PD5)|(1<<PD7));
        LDI     R16, 160
        IN      R17, 0x12
        EOR     R17, R16
        OUT     0x12, R17
//   24 }
        OUT     0x3F, R18
        LD      R16, Y+
        CFI R16 SameValue
        CFI CFA_Y Y+2
        LD      R17, Y+
        CFI R17 SameValue
        CFI CFA_Y Y+1
        LD      R18, Y+
        CFI R18 SameValue
        CFI CFA_Y Y+0
        RETI
        CFI EndBlock cfiBlock1
//   25 

        RSEG CODE:CODE:NOROOT(1)
//   26 void main( void )
main:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function main
//   27 {
//   28   /// включим подтяжку на всех выводах МК
//   29    PORTB = 0xFF;
        FUNCALL main, init_Timer_0
        LOCFRAME RSTACK, 2, STACK
        LDI     R16, 255
        OUT     0x18, R16
//   30    PORTC = 0xFF;
        OUT     0x15, R16
//   31    PORTD = 0xFF;
        OUT     0x12, R16
//   32 
//   33   /// определим направление - ВЫХОД
//   34   DDRD |= DIG_OUT_MASK;
        IN      R16, 0x11
        ORI     R16, 0xE0
        OUT     0x11, R16
//   35   /// предустановка бит порта - теперь они работают как источник 20мА
//   36   /// напряжение 5В
//   37   PORTD |= DIG_OUT_MASK;
        IN      R16, 0x12
        ORI     R16, 0xE0
        OUT     0x12, R16
//   38 
//   39   // Процедура настройки таймера 0
//   40   init_Timer_0();
        RCALL   init_Timer_0
//   41 
//   42   /// разрешаем прерывания
//   43   _SEI();
        SEI
//   44 
//   45   ///////////////////////////
//   46   /// основной цикл
//   47   while(1){
//   48     /// встроленная функция эквиваелент команды nop
//   49     /// ничего не делаем
//   50     _NOP();
??main_0:
        NOP
        RJMP    ??main_0
        CFI EndBlock cfiBlock2
//   51   }
//   52 }

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        COMMON INTVEC:CODE:ROOT(1)
        ORG 18
`??Timer_0_ovfEVENT??INTVEC 18`:
        RJMP    Timer_0_ovfEVENT

        END
// 
//  7 bytes in segment ABSOLUTE
// 66 bytes in segment CODE
//  2 bytes in segment INTVEC
// 
// 66 bytes of CODE memory (+ 2 bytes shared)
//  0 bytes of DATA memory (+ 7 bytes shared)
//
//Errors: none
//Warnings: none
