//////////////////////////////////////////////////////////////////////////////
//                                                                           /
//                                                     10/Feb/2008  00:02:20 /
// IAR Atmel AVR C/C++ Compiler V4.20A/W32, Evaluation Version               /
// Copyright 1996-2006 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Source file  =  C:\Documents and Settings\Serg\SERG_DOCUM\_ПРГРАММА    /
//                    ИНСТИТУТ\LABORATOR_WORKS\Lab_3_PWM_and_Butt\Timer_2_CN /
//                    TRL.c                                                  /
//    Command line =  "C:\Documents and Settings\Serg\SERG_DOCUM\_ПРГРАММА   /
//                    ИНСТИТУТ\LABORATOR_WORKS\Lab_3_PWM_and_Butt\Timer_2_CN /
//                    TRL.c" --cpu=m8 -ms -o "C:\Documents and               /
//                    Settings\Serg\SERG_DOCUM\_ПРГРАММА                     /
//                    ИНСТИТУТ\LABORATOR_WORKS\Lab_3_PWM_and_Butt\Debug\Obj\ /
//                    " -lC "C:\Documents and Settings\Serg\SERG_DOCUM\_ПРГР /
//                    АММА ИНСТИТУТ\LABORATOR_WORKS\Lab_3_PWM_and_Butt\Debug /
//                    \List\" -lA "C:\Documents and                          /
//                    Settings\Serg\SERG_DOCUM\_ПРГРАММА                     /
//                    ИНСТИТУТ\LABORATOR_WORKS\Lab_3_PWM_and_Butt\Debug\List /
//                    \" --initializers_in_flash -z9 --cross_call_passes=3   /
//                    --debug -DENABLE_BIT_DEFINITIONS --do_cross_call -e    /
//                    -I "C:\Program Files\IAR Systems\Embedded Workbench    /
//                    4.0 Evaluation\avr\INC\" -I "C:\Program Files\IAR      /
//                    Systems\Embedded Workbench 4.0                         /
//                    Evaluation\avr\INC\CLIB\" --eeprom_size 512            /
//    List file    =  C:\Documents and Settings\Serg\SERG_DOCUM\_ПРГРАММА    /
//                    ИНСТИТУТ\LABORATOR_WORKS\Lab_3_PWM_and_Butt\Debug\List /
//                    \Timer_2_CNTRL.s90                                     /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME Timer_2_CNTRL

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__cpu", "1"
        RTMODEL "__cpu_name", "ATmega8"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        PUBLIC Timer2_CHECK
        FUNCTION Timer2_CHECK,0203H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC Timer2_INIT
        FUNCTION Timer2_INIT,0203H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC Timer2_START
        FUNCTION Timer2_START,0203H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC Timer2_STOP
        FUNCTION Timer2_STOP,0203H
        LOCFRAME RSTACK, 2, STACK
        PUBWEAK _A_OCR2
        PUBWEAK _A_TCCR2
        PUBWEAK _A_TCNT2
        PUBWEAK _A_TIFR
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        
        CFI Names cfiNames0
        CFI StackFrame CFA_Y Y DATA
        CFI StackFrame CFA_SP SP DATA
        CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
        CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
        CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
        CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
        CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
        CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
        CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
        CFI ResourceParts SP SPH, SPL
        CFI ResourceParts Y R29, R28
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign 1
        CFI ReturnAddress ?Ret CODE
        CFI CFA_Y Y+0
        CFI CFA_SP SP+2
        CFI ?RetPad 0
        CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
        CFI ?RetLow Frame(CFA_SP, 0)
        CFI ?Ret Concat
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 SameValue
        CFI R13 SameValue
        CFI R14 SameValue
        CFI R15 SameValue
        CFI R16 Undefined
        CFI R17 Undefined
        CFI R18 Undefined
        CFI R19 Undefined
        CFI R20 Undefined
        CFI R21 Undefined
        CFI R22 Undefined
        CFI R23 Undefined
        CFI R24 SameValue
        CFI R25 SameValue
        CFI R26 SameValue
        CFI R27 SameValue
        CFI R28 Undefined
        CFI R29 Undefined
        CFI R30 Undefined
        CFI R31 Undefined
        CFI ?RetHighByteMask SameValue
        CFI SPH Undefined
        CFI SPL Undefined
        CFI EndCommon cfiCommon0
        
// C:\Documents and Settings\Serg\SERG_DOCUM\_ПРГРАММА ИНСТИТУТ\LABORATOR_WORKS\Lab_3_PWM_and_Butt\Timer_2_CNTRL.c
//    1 #include "Timer_2_CNTRL.h"

        ASEGN ABSOLUTE:DATA:NOROOT,043H
// union <unnamed> volatile __io _A_OCR2
_A_OCR2:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,044H
// union <unnamed> volatile __io _A_TCNT2
_A_TCNT2:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,045H
// union <unnamed> volatile __io _A_TCCR2
_A_TCCR2:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,058H
// union <unnamed> volatile __io _A_TIFR
_A_TIFR:
        DS 1
//    2 
//    3 //// что бы сформировать заданный интервал времени
//    4 //// нужно определиться с коэффициентом деления
//    5 //// возможно 1,8,32,64,128,256,1024
//    6 
//    7 //// желательно чтобы за один прогон счетчика мы
//    8 /// сформировали заданный интервал поэотму
//    9 /// число переполнений не должно быть более 1
//   10 
//   11 /// число переполнениий считаем так
//   12 /// Noverflow (1) = Fquarz*TIME_SETTED/(CountVAL*Kprescaler)
//   13 /// отсюда
//   14 /// Kprescaler >=  Fquarz*TIME_SETTED/CountVAL
//   15 /// где CountVAL - емкость счетчика T2 = 256
//   16 /// после того ка определили Kprescaler
//   17 /// значение загружаемое в регистр сравнения
//   18 /// определиться так COMPARE_VAL = Fquarz*TIME_SETTED/Kprescaler
//   19 
//   20 
//   21 //// можно получить без предделителя
//   22 #if (TIME_INTERVAL*SYSTEM_CLOCK/25600000U) < 1
//   23 #define OCR2VAL		(TIME_INTERVAL*SYSTEM_CLOCK/100000U/1)
//   24 #define TIMER_2_START_MASK		0x01
//   25 
//   26 //// можно получить если коэффициент делитель реван 8
//   27 #elif (TIME_INTERVAL*SYSTEM_CLOCK/25600000U/8) < 1
//   28 #define OCR2VAL		(TIME_INTERVAL*SYSTEM_CLOCK/100000U/8)
//   29 #define TIMER_2_START_MASK		0x02
//   30 
//   31 //// можно получить если коэффициент делитель реван 32
//   32 #elif (TIME_INTERVAL*SYSTEM_CLOCK/25600000U/32) < 1
//   33 #define OCR2VAL		(TIME_INTERVAL*SYSTEM_CLOCK/100000U/32)
//   34 #define TIMER_2_START_MASK		0x03
//   35 
//   36 //// можно получить если коэффициент делитель реван 64
//   37 #elif (TIME_INTERVAL*SYSTEM_CLOCK/25600000U/64) < 1
//   38 #define OCR2VAL		(TIME_INTERVAL*SYSTEM_CLOCK/100000U/64)
//   39 #define TIMER_2_START_MASK		0x04
//   40 
//   41 //// можно получить если коэффициент делитель реван 128
//   42 #elif (TIME_INTERVAL*SYSTEM_CLOCK/25600000U/128) < 1
//   43 #define OCR2VAL		(TIME_INTERVAL*SYSTEM_CLOCK/100000U/128)
//   44 #define TIMER_2_START_MASK		0x05
//   45 
//   46 //// можно получить если коэффициент делитель реван 256
//   47 #elif (TIME_INTERVAL*SYSTEM_CLOCK/25600000U/256) < 1
//   48 #define OCR2VAL		(TIME_INTERVAL*SYSTEM_CLOCK/100000U/256)
//   49 #define TIMER_2_START_MASK		0x06
//   50 
//   51 //// можно получить если коэффициент делитель реван 1024
//   52 #elif (TIME_INTERVAL*SYSTEM_CLOCK/25600000U/1024) < 1
//   53 #define OCR2VAL		(TIME_INTERVAL*SYSTEM_CLOCK/100000U/1024)
//   54 #define TIMER_2_START_MASK		0x07
//   55 
//   56 //// нельзя получить	
//   57 #else
//   58 #error "ЗАДАННОЕ ВРЕМЯ ПЕРЕПОЛНЕНИЯ -TIME_INTERVAL- Т2 СЛИШКОМ ВЕЛИКО"
//   59 #define OCR2VAL				0x00
//   60 #define TIMER_2_START_MASK		0x00
//   61 
//   62 #endif
//   63 ///////////////////////////////
//   64 /// На выходе этой конструкции имеем
//   65 /// OCR2VAL и TIMER_2_START_MASK
//   66 /// которые определят конфигурацию таймера 2 для
//   67 /// формирования заданного интервала
//   68 /// понятно что этот интервал не точно равен заданному времени
//   69 /// а с учетом погрешности до 1 тактового импульса счетчика
//   70 /// и на 1024 и 8МГц может быть 128мкс
//   71 
//   72 #define TIMER_2_START	TCCR2 |= TIMER_2_START_MASK;
//   73 #define TIMER_2_STOP	TCCR2 &= ~0x07;
//   74 
//   75 
//   76 //// настройка таймера 2 на генерацию временного интервала
//   77 /// на опрос кнопок будет достаточно 20мс интервала

        RSEG CODE:CODE:NOROOT(1)
//   78 void Timer2_INIT(void)
Timer2_INIT:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function Timer2_INIT
//   79 {
//   80     TIMER_2_STOP; 	/// на всякий случай		
        IN      R16, 0x25
        ANDI    R16, 0xF8
        OUT     0x25, R16
//   81     TCCR2 = (1<<WGM21); /// режим работы счет до величины записаной
        LDI     R16, 8
        OUT     0x25, R16
//   82     OCR2 = (char)OCR2VAL; /// значение соответствует интервалу TIME_INTERVAL
        LDI     R16, 100
        OUT     0x23, R16
//   83     TCNT2 = 0;
        LDI     R16, 0
        OUT     0x24, R16
//   84 }
        RET
        CFI EndBlock cfiBlock0
//   85 //// опрос флага временного интервала
//   86 //// вернет да прошел заданный интервал времени

        RSEG CODE:CODE:NOROOT(1)
//   87 u_char Timer2_CHECK(void)
Timer2_CHECK:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function Timer2_CHECK
//   88 {
//   89   if(TIFR&(1<<OCF2)){
        IN      R16, 0x38
        SBRS    R16, 7
        RJMP    ??Timer2_CHECK_0
//   90      TIFR = (1<<OCF2); /// сбросим флаг
        LDI     R16, 128
        OUT     0x38, R16
//   91      return 1;
        LDI     R16, 1
        RET
//   92   }
//   93   return 0;
??Timer2_CHECK_0:
        LDI     R16, 0
        RET
        CFI EndBlock cfiBlock1
//   94 }
//   95 //// запуск таймера

        RSEG CODE:CODE:NOROOT(1)
//   96 void Timer2_START(void)
Timer2_START:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function Timer2_START
//   97 {
//   98 	TIMER_2_START;
        IN      R16, 0x25
        ORI     R16, 0x02
        CFI EndBlock cfiBlock2
        REQUIRE ?Subroutine0
        ;               // Fall through to label ?Subroutine0
//   99 }

        RSEG CODE:CODE:NOROOT(1)
?Subroutine0:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI NoFunction
        OUT     0x25, R16
        RET
        CFI EndBlock cfiBlock3
//  100 //// останов таймера

        RSEG CODE:CODE:NOROOT(1)
//  101 void Timer2_STOP(void)
Timer2_STOP:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function Timer2_STOP
//  102 {
//  103 	TIMER_2_STOP;
        IN      R16, 0x25
        ANDI    R16, 0xF8
        RJMP    ?Subroutine0
        CFI EndBlock cfiBlock4
//  104 }

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        END
// 
//  4 bytes in segment ABSOLUTE
// 52 bytes in segment CODE
// 
// 52 bytes of CODE memory
//  0 bytes of DATA memory (+ 4 bytes shared)
//
//Errors: none
//Warnings: none
