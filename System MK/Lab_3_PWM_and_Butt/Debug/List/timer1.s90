//////////////////////////////////////////////////////////////////////////////
//                                                                           /
//                                                     10/Feb/2008  00:02:21 /
// IAR Atmel AVR C/C++ Compiler V4.20A/W32, Evaluation Version               /
// Copyright 1996-2006 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Source file  =  C:\Documents and Settings\Serg\SERG_DOCUM\_ПРГРАММА    /
//                    ИНСТИТУТ\LABORATOR_WORKS\Lab_3_PWM_and_Butt\timer1.c   /
//    Command line =  "C:\Documents and Settings\Serg\SERG_DOCUM\_ПРГРАММА   /
//                    ИНСТИТУТ\LABORATOR_WORKS\Lab_3_PWM_and_Butt\timer1.c"  /
//                    --cpu=m8 -ms -o "C:\Documents and                      /
//                    Settings\Serg\SERG_DOCUM\_ПРГРАММА                     /
//                    ИНСТИТУТ\LABORATOR_WORKS\Lab_3_PWM_and_Butt\Debug\Obj\ /
//                    " -lC "C:\Documents and Settings\Serg\SERG_DOCUM\_ПРГР /
//                    АММА ИНСТИТУТ\LABORATOR_WORKS\Lab_3_PWM_and_Butt\Debug /
//                    \List\" -lA "C:\Documents and                          /
//                    Settings\Serg\SERG_DOCUM\_ПРГРАММА                     /
//                    ИНСТИТУТ\LABORATOR_WORKS\Lab_3_PWM_and_Butt\Debug\List /
//                    \" --initializers_in_flash -z9 --cross_call_passes=3   /
//                    --debug -DENABLE_BIT_DEFINITIONS --do_cross_call -e    /
//                    -I "C:\Program Files\IAR Systems\Embedded Workbench    /
//                    4.0 Evaluation\avr\INC\" -I "C:\Program Files\IAR      /
//                    Systems\Embedded Workbench 4.0                         /
//                    Evaluation\avr\INC\CLIB\" --eeprom_size 512            /
//    List file    =  C:\Documents and Settings\Serg\SERG_DOCUM\_ПРГРАММА    /
//                    ИНСТИТУТ\LABORATOR_WORKS\Lab_3_PWM_and_Butt\Debug\List /
//                    \timer1.s90                                            /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME timer1

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__cpu", "1"
        RTMODEL "__cpu_name", "ATmega8"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        PUBLIC Init_TimerT1
        FUNCTION Init_TimerT1,0203H
        LOCFRAME RSTACK, 2, STACK
        PUBWEAK _A_DDRB
        PUBWEAK _A_ICR1
        PUBWEAK _A_OCR1A
        PUBWEAK _A_PORTB
        PUBWEAK _A_TCCR1A
        PUBWEAK _A_TCCR1B
        PUBWEAK _A_TCNT1
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        
        CFI Names cfiNames0
        CFI StackFrame CFA_Y Y DATA
        CFI StackFrame CFA_SP SP DATA
        CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
        CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
        CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
        CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
        CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
        CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
        CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
        CFI ResourceParts SP SPH, SPL
        CFI ResourceParts Y R29, R28
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign 1
        CFI ReturnAddress ?Ret CODE
        CFI CFA_Y Y+0
        CFI CFA_SP SP+2
        CFI ?RetPad 0
        CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
        CFI ?RetLow Frame(CFA_SP, 0)
        CFI ?Ret Concat
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 SameValue
        CFI R13 SameValue
        CFI R14 SameValue
        CFI R15 SameValue
        CFI R16 Undefined
        CFI R17 Undefined
        CFI R18 Undefined
        CFI R19 Undefined
        CFI R20 Undefined
        CFI R21 Undefined
        CFI R22 Undefined
        CFI R23 Undefined
        CFI R24 SameValue
        CFI R25 SameValue
        CFI R26 SameValue
        CFI R27 SameValue
        CFI R28 Undefined
        CFI R29 Undefined
        CFI R30 Undefined
        CFI R31 Undefined
        CFI ?RetHighByteMask SameValue
        CFI SPH Undefined
        CFI SPL Undefined
        CFI EndCommon cfiCommon0
        
// C:\Documents and Settings\Serg\SERG_DOCUM\_ПРГРАММА ИНСТИТУТ\LABORATOR_WORKS\Lab_3_PWM_and_Butt\timer1.c
//    1 #include "timer1.h"

        ASEGN ABSOLUTE:DATA:NOROOT,037H
// union <unnamed> volatile __io _A_DDRB
_A_DDRB:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,038H
// union <unnamed> volatile __io _A_PORTB
_A_PORTB:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,046H
// union <unnamed> volatile __io _A_ICR1
_A_ICR1:
        DS 2

        ASEGN ABSOLUTE:DATA:NOROOT,04aH
// union <unnamed> volatile __io _A_OCR1A
_A_OCR1A:
        DS 2

        ASEGN ABSOLUTE:DATA:NOROOT,04cH
// union <unnamed> volatile __io _A_TCNT1
_A_TCNT1:
        DS 2

        ASEGN ABSOLUTE:DATA:NOROOT,04eH
// union <unnamed> volatile __io _A_TCCR1B
_A_TCCR1B:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,04fH
// union <unnamed> volatile __io _A_TCCR1A
_A_TCCR1A:
        DS 1
//    2 
//    3 //// Настройка и управлением таймером 1
//    4 /// работает в режиме FAST_PWM
//    5 /// TOP - в регистре ICR  сравнение в OCR1A

        RSEG CODE:CODE:NOROOT(1)
//    6 void Init_TimerT1(void)
Init_TimerT1:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function Init_TimerT1
//    7 {
//    8   /// настрока портов
//    9   /// PB1 - управление силовым ключем
//   10    PORTB &= ~(1<<PB1);  /// выключим ключ
        CBI     0x18, 0x01
//   11    DDRB |= (1<<PB1);     /// настроим направление ВЫХОД
        SBI     0x17, 0x01
//   12   /// установим режим работы вывода ОС1А
//   13   /// и вид ШИМ
//   14   TCCR1A = (1<<COM1A1)|(1<<COM1A0) /// режим работы выхода OC1A
//   15               ///Set OC1A/OC1B on Compare Match, clear OC1A/OC1B at TOP
//   16           | (0<<WGM10)|(1<<WGM11);
        LDI     R16, 194
        OUT     0x2F, R16
//   17    TCCR1B = (1<<WGM13)|(1<<WGM12);  /// режим fast PWM
        LDI     R16, 24
        OUT     0x2E, R16
//   18    /// предельное значение ШИМ
//   19    ICR1   = PWM_TOP_VAL;   /// TOP - до чего считаем
        LDI     R16, 255
        LDI     R17, 3
        OUT     0x27, R17
        OUT     0x26, R16
//   20    OCR1A  = 0;             /// значение ШИМ - 0
        LDI     R16, 0
        OUT     0x2B, R16
        OUT     0x2A, R16
//   21    TCNT1  = 0;
        OUT     0x2D, R16
        OUT     0x2C, R16
//   22    TCCR1B |= (1<<CS10);    /// запустили таймер
        IN      R16, 0x2E
        ORI     R16, 0x01
        OUT     0x2E, R16
//   23 }
        RET
        CFI EndBlock cfiBlock0

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        END
//   24 
//   25 
//   26 /// конец
//   27 /***********************************************************************/
//   28 
//   29 
// 
// 10 bytes in segment ABSOLUTE
// 38 bytes in segment CODE
// 
// 38 bytes of CODE memory
//  0 bytes of DATA memory (+ 10 bytes shared)
//
//Errors: none
//Warnings: none
