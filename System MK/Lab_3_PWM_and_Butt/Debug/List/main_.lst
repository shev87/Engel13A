##############################################################################
#                                                                            #
#                                                      10/Feb/2008  00:02:21 #
# IAR Atmel AVR C/C++ Compiler V4.20A/W32, Evaluation Version                #
# Copyright 1996-2006 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  C:\Documents and Settings\Serg\SERG_DOCUM\_ПРГРАММА     #
#                    ИНСТИТУТ\LABORATOR_WORKS\Lab_3_PWM_and_Butt\main_.c     #
#    Command line =  "C:\Documents and Settings\Serg\SERG_DOCUM\_ПРГРАММА    #
#                    ИНСТИТУТ\LABORATOR_WORKS\Lab_3_PWM_and_Butt\main_.c"    #
#                    --cpu=m8 -ms -o "C:\Documents and                       #
#                    Settings\Serg\SERG_DOCUM\_ПРГРАММА                      #
#                    ИНСТИТУТ\LABORATOR_WORKS\Lab_3_PWM_and_Butt\Debug\Obj\" #
#                     -lC "C:\Documents and Settings\Serg\SERG_DOCUM\_ПРГРАМ #
#                    МА ИНСТИТУТ\LABORATOR_WORKS\Lab_3_PWM_and_Butt\Debug\Li #
#                    st\" -lA "C:\Documents and                              #
#                    Settings\Serg\SERG_DOCUM\_ПРГРАММА                      #
#                    ИНСТИТУТ\LABORATOR_WORKS\Lab_3_PWM_and_Butt\Debug\List\ #
#                    " --initializers_in_flash -z9 --cross_call_passes=3     #
#                    --debug -DENABLE_BIT_DEFINITIONS --do_cross_call -e -I  #
#                    "C:\Program Files\IAR Systems\Embedded Workbench 4.0    #
#                    Evaluation\avr\INC\" -I "C:\Program Files\IAR           #
#                    Systems\Embedded Workbench 4.0                          #
#                    Evaluation\avr\INC\CLIB\" --eeprom_size 512             #
#    List file    =  C:\Documents and Settings\Serg\SERG_DOCUM\_ПРГРАММА     #
#                    ИНСТИТУТ\LABORATOR_WORKS\Lab_3_PWM_and_Butt\Debug\List\ #
#                    main_.lst                                               #
#    Object file  =  C:\Documents and Settings\Serg\SERG_DOCUM\_ПРГРАММА     #
#                    ИНСТИТУТ\LABORATOR_WORKS\Lab_3_PWM_and_Butt\Debug\Obj\m #
#                    ain_.r90                                                #
#                                                                            #
#                                                                            #
##############################################################################

C:\Documents and Settings\Serg\SERG_DOCUM\_ПРГРАММА ИНСТИТУТ\LABORATOR_WORKS\Lab_3_PWM_and_Butt\main_.c
      1          #include "SHow_FUN.h"

   \                                 In segment ABSOLUTE, at 0x4a
   \   union <unnamed> volatile __io _A_OCR1A
   \                     _A_OCR1A:
   \   00000000                      DS 2
      2          #include "Timer_2_CNTRL.h"
      3          #include "INDIKATE.h"
      4          #include "Kbrd.h"
      5          #include "timer1.h"
      6          

   \                                 In segment CODE, align 2, keep-with-next
      7          void main( void )
   \                     main:
      8          {
   \   00000000   ....               RCALL   ?PROLOGUE2_L09
      9           /// переменная счетчик тиков по 100мкс
     10           u_int tick_cntr = 0;
   \   00000002   E080               LDI     R24, 0
   \   00000004   E090               LDI     R25, 0
     11           u_char ctmp;
     12            ///////////////////////////
     13            /// Предварительная настройка портов
     14            /// работаем с МК 1 к котрому прицеплены ЦАП и ключ силовой
     15            /// готовит порт для индикации результата Бит PB0 PORTB
     16            show_init();
   \   00000006   ....               RCALL   show_init
     17            /// настройка таймера 2 на генерацию временного интервала
     18            /// на опрос кнопок будет достаточно 20мс интервала
     19            Timer2_INIT();
   \   00000008   ....               RCALL   Timer2_INIT
     20            Timer2_START();  //// запуск таймера
   \   0000000A   ....               RCALL   Timer2_START
     21            /// процедура настройка индикация режим работы
     22            InitIndikate();
   \   0000000C   ....               RCALL   InitIndikate
     23            /// ф установить режим индикации как будет гореть LED
     24            /// для установвки другого режима индикации - один из
     25            /// определенных === /// режим индикации светодиода
     26            Set_INDIK_VAL(LED_1SHORT);
   \   0000000E   E001               LDI     R16, 1
   \   00000010   ....               RCALL   Set_INDIK_VAL
     27            //// Настройка и управлением таймером 1
     28            /// работает в режиме FAST_PWM
     29            /// TOP - в регистре ICR  сравнение в OCR1A
     30            Init_TimerT1();
   \   00000012   ....               RCALL   Init_TimerT1
   \   00000014   C002               RJMP    ??main_0
     31          
     32            ///////////////////////////
     33            /// основной цикл
     34            while(1){
     35               ////////////////////////////////////////////////////////
     36               /// обработка таймера
     37               if(Timer2_CHECK()){/// каждые 100мкс
     38                  tick_cntr++;    /// считаем 100мкс
     39          
     40                  // процедура опроса кнопок вызываем 1 раз в 25 мс
     41                  if((tick_cntr&0x00FF)== 0){
     42                     ChkKbrd();
     43                  }
     44          
     45                  /// функция выводит на ножку значение 10бит
     46                  /// что бы посмотреть его осциллографом
     47                  show_result(OCR1A);
     48                  //////////////////////////////////////////////
     49                  if(tick_cntr>=1000){     /// каждые 100 мс
     50                     tick_cntr = 0;        /// переустановим счетчик
     51                     Indikate( );          /// процедура индикации текущего режима работы
     52          
     53                     ctmp = GetPrsCode();
     54                     if( ctmp == TWOKEYPRS ){ // нажали обе кнопки
     55                        OCR1A = 0;/// сброс регистра в 0 - отключим ШИМ
   \                     ??main_1:
   \   00000016   BD8B               OUT     0x2B, R24
   \   00000018   BD8A               OUT     0x2A, R24
     56                     }else if( ctmp == LEFTSHORT ){ /// короткое нажатие SW1
   \                     ??main_0:
   \   0000001A   ....               RCALL   Timer2_CHECK
   \   0000001C   2300               TST     R16
   \   0000001E   F3E9               BREQ    ??main_0
   \   00000020   9601               ADIW    R25:R24, 1
   \   00000022   2388               TST     R24
   \   00000024   F409               BRNE    ??main_2
   \   00000026   ....               RCALL   ChkKbrd
   \                     ??main_2:
   \   00000028   ....               RCALL   ?Subroutine0
   \                     ??CrossCallReturnLabel_0:
   \   0000002A   ....               RCALL   show_result
   \   0000002C   3E88               CPI     R24, 232
   \   0000002E   E003               LDI     R16, 3
   \   00000030   0790               CPC     R25, R16
   \   00000032   F398               BRCS    ??main_0
   \   00000034   E080               LDI     R24, 0
   \   00000036   E090               LDI     R25, 0
   \   00000038   ....               RCALL   Indikate
   \   0000003A   ....               RCALL   GetPrsCode
   \   0000003C   3005               CPI     R16, 5
   \   0000003E   F359               BREQ    ??main_1
   \   00000040   3001               CPI     R16, 1
   \   00000042   F449               BRNE    ??main_3
     57                        if(OCR1A)
   \   00000044   ....               RCALL   ?Subroutine0
   \                     ??CrossCallReturnLabel_1:
   \   00000046   2B01               OR      R16, R17
   \   00000048   F341               BREQ    ??main_0
     58                           OCR1A--;   /// уменьшим ШИМ точно на 1
   \   0000004A   ....               RCALL   ?Subroutine0
   \                     ??CrossCallReturnLabel_2:
   \   0000004C   5001               SUBI    R16, 1
   \                     ??main_4:
   \   0000004E   4010               SBCI    R17, 0
   \                     ??main_5:
   \   00000050   BD1B               OUT     0x2B, R17
   \                     ??main_6:
   \   00000052   BD0A               OUT     0x2A, R16
   \   00000054   CFE2               RJMP    ??main_0
     59                     }else if( ctmp == RIGHTSHORT ){ /// короткое нажатие SW2
   \                     ??main_3:
   \   00000056   3003               CPI     R16, 3
   \   00000058   F441               BRNE    ??main_7
     60                        if(OCR1A<PWM_TOP_VAL)
   \   0000005A   ....               RCALL   ?Subroutine0
   \                     ??CrossCallReturnLabel_3:
   \   0000005C   3F0F               CPI     R16, 255
   \   0000005E   4013               SBCI    R17, 3
   \   00000060   F6E0               BRCC    ??main_0
     61                           OCR1A++;   /// увеличим ШИМ точно на 1
   \   00000062   ....               RCALL   ?Subroutine0
   \                     ??CrossCallReturnLabel_4:
   \   00000064   5F0F               SUBI    R16, 255
   \                     ??main_8:
   \   00000066   4F1F               SBCI    R17, 255
   \   00000068   CFF3               RJMP    ??main_5
     62                     }else if( ctmp == LEFTLONG ){ /// длинное нажатие SW1
   \                     ??main_7:
   \   0000006A   3002               CPI     R16, 2
   \   0000006C   F439               BRNE    ??main_9
     63                        if(OCR1A > 50)
   \   0000006E   B5EA               IN      R30, 0x2A
   \   00000070   B5FB               IN      R31, 0x2B
   \   00000072   97F3               SBIW    R31:R30, 51
   \   00000074   F280               BRCS    ??main_1
     64                           OCR1A -= 50;   /// уменьшим ШИМ точно на 50
   \   00000076   ....               RCALL   ?Subroutine0
   \                     ??CrossCallReturnLabel_5:
   \   00000078   5302               SUBI    R16, 50
   \   0000007A   CFE9               RJMP    ??main_4
     65                        else   /// если значение менее 50 ...
     66                           OCR1A = 0;
     67                     }else if( ctmp == RIGHTLONG ){ /// длинное нажатие SW2
   \                     ??main_9:
   \   0000007C   3004               CPI     R16, 4
   \   0000007E   F669               BRNE    ??main_0
     68                        if(OCR1A<(PWM_TOP_VAL-50))
   \   00000080   ....               RCALL   ?Subroutine0
   \                     ??CrossCallReturnLabel_6:
   \   00000082   3C0D               CPI     R16, 205
   \   00000084   E023               LDI     R18, 3
   \   00000086   4013               SBCI    R17, 3
   \   00000088   F418               BRCC    ??main_10
     69                           OCR1A += 50;   /// увеличим ШИМ точно на 1
   \   0000008A   ....               RCALL   ?Subroutine0
   \                     ??CrossCallReturnLabel_7:
   \   0000008C   5C0E               SUBI    R16, 206
   \   0000008E   CFEB               RJMP    ??main_8
     70                        else  /// если значение больше чем  PWM_TOP_VAL-50 ...
     71                           OCR1A = PWM_TOP_VAL-1;
   \                     ??main_10:
   \   00000090   EF0E               LDI     R16, 254
   \   00000092   BD2B               OUT     0x2B, R18
   \   00000094   CFDE               RJMP    ??main_6
     72                     }
     73          
     74          
     75                  }/// конец каждые 100 мс
     76                  //////////////////////////////////////////////
     77               }/// КОНЕЦ обработка таймера каждые 100мкс
     78            }
     79          }

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   B50A               IN      R16, 0x2A
   \   00000002   B51B               IN      R17, 0x2B
   \   00000004   9508               RET
     80          
     81          

   Maximum stack usage in bytes:

     Function           CSTACK RSTACK
     --------           ------ ------
     main                   2      2
       -> show_init         2      2
       -> Timer2_INIT       2      2
       -> Timer2_START      2      2
       -> InitIndikate      2      2
       -> Set_INDIK_VAL     2      2
       -> Init_TimerT1      2      2
       -> Timer2_CHECK      2      2
       -> ChkKbrd           2      2
       -> show_result       2      2
       -> Indikate          2      2
       -> GetPrsCode        2      2


   Segment part sizes:

     Function/Label Bytes
     -------------- -----
     _A_OCR1A          2
     main            150
     ?Subroutine0      6

 
   2 bytes in segment ABSOLUTE
 156 bytes in segment CODE
 
 156 bytes of CODE memory
   0 bytes of DATA memory (+ 2 bytes shared)

Errors: none
Warnings: none
