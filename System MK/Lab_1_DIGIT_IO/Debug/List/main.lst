##############################################################################
#                                                                            #
#                                                      29/Feb/2008  23:14:16 #
# IAR Atmel AVR C/C++ Compiler V4.20A/W32, Evaluation Version                #
# Copyright 1996-2006 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  C:\Documents and Settings\Serg\SERG_DOCUM\_ПРГРАММА     #
#                    ИНСТИТУТ\LABORATOR_WORKS\Lab_1_DIGIT_IO\main.c          #
#    Command line =  "C:\Documents and Settings\Serg\SERG_DOCUM\_ПРГРАММА    #
#                    ИНСТИТУТ\LABORATOR_WORKS\Lab_1_DIGIT_IO\main.c"         #
#                    --cpu=m8 -mt -o "C:\Documents and                       #
#                    Settings\Serg\SERG_DOCUM\_ПРГРАММА                      #
#                    ИНСТИТУТ\LABORATOR_WORKS\Lab_1_DIGIT_IO\Debug\Obj\"     #
#                    -lCN "C:\Documents and Settings\Serg\SERG_DOCUM\_ПРГРАМ #
#                    МА ИНСТИТУТ\LABORATOR_WORKS\Lab_1_DIGIT_IO\Debug\List\" #
#                     -lA "C:\Documents and Settings\Serg\SERG_DOCUM\_ПРГРАМ #
#                    МА ИНСТИТУТ\LABORATOR_WORKS\Lab_1_DIGIT_IO\Debug\List\" #
#                     --initializers_in_flash -z9 --cross_call_passes=3      #
#                    --debug -DENABLE_BIT_DEFINITIONS --do_cross_call -e -I  #
#                    "C:\Program Files\IAR Systems\Embedded Workbench 4.0    #
#                    Evaluation\avr\INC\" -I "C:\Program Files\IAR           #
#                    Systems\Embedded Workbench 4.0                          #
#                    Evaluation\avr\INC\CLIB\" --eeprom_size 512             #
#    List file    =  C:\Documents and Settings\Serg\SERG_DOCUM\_ПРГРАММА     #
#                    ИНСТИТУТ\LABORATOR_WORKS\Lab_1_DIGIT_IO\Debug\List\main #
#                    .lst                                                    #
#    Object file  =  C:\Documents and Settings\Serg\SERG_DOCUM\_ПРГРАММА     #
#                    ИНСТИТУТ\LABORATOR_WORKS\Lab_1_DIGIT_IO\Debug\Obj\main. #
#                    r90                                                     #
#                                                                            #
#                                                                            #
##############################################################################

C:\Documents and Settings\Serg\SERG_DOCUM\_ПРГРАММА ИНСТИТУТ\LABORATOR_WORKS\Lab_1_DIGIT_IO\main.c
      1          #include "Header.h"

   \                                 In segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS 1

   \                                 In segment ABSOLUTE, at 0x32
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS 1

   \                                 In segment ABSOLUTE, at 0x35
   \   union <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS 1

   \                                 In segment ABSOLUTE, at 0x38
   \   union <unnamed> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS 1
      2          
      3          //// задаемся задержкой на 100 тиков
      4          #define SIGNAL_DELAY    100
      5          
      6          /// Можно определить маску для работы с нужными битами
      7          #define DIG_OUT_MASK  ((1<<PD5)|(1<<PD6)|(1<<PD7))
      8          
      9          

   \                                 In segment CODE, align 2, keep-with-next
     10          void main( void )
   \                     main:
     11          {
     12            /// включим подтяжку на всех выводах МК
     13             PORTB = 0xFF;
   \   00000000   EF0F               LDI     R16, 255
   \   00000002   BB08               OUT     0x18, R16
     14             PORTC = 0xFF;
   \   00000004   BB05               OUT     0x15, R16
     15             PORTD = 0xFF;
   \   00000006   BB02               OUT     0x12, R16
     16            ///////////////////////////
     17            /// Предварительная настройка портов
     18            /// работаем с МК 1 к котрому прицеплены ЦАП и ключ силовой
     19            /// Настроим биты порта PORTD 5,6,7
     20          
     21            /// определим направление - ВЫХОД
     22            DDRD |= (1<<PD5)|(1<<PD6)|(1<<PD7);
   \   00000008   B301               IN      R16, 0x11
   \   0000000A   6E00               ORI     R16, 0xE0
   \   0000000C   BB01               OUT     0x11, R16
     23            /// предустановка бит порта - теперь они работают как источник 20мА
     24            /// напряжение 5В
     25            /// Вариант установки в 1 бит 5,6,7 не трогаем остальные биты порта
     26            PORTD |= (1<<PD5)|(1<<PD6)|(1<<PD7);
   \   0000000E   B302               IN      R16, 0x12
   \   00000010   6E00               ORI     R16, 0xE0
   \   00000012   BB02               OUT     0x12, R16
     27            /// в таком варианте остальные биты будут сброшены в лог.0
     28            ///PORTD = (1<<PD5)|(1<<PD6)|(1<<PD7);
     29          
     30            ///////////////////////////
     31            /// основной цикл
     32            while(1){
     33               /// 1 установим значение наших бит все 1
     34               PORTD |= (1<<PD5)|(1<<PD6)|(1<<PD7);
   \                     ??main_0:
   \   00000014   B302               IN      R16, 0x12
   \   00000016   6E00               ORI     R16, 0xE0
   \   00000018   ....               RCALL   ?Subroutine0
     35          
     36               /// Вариант работы с маской
     37               ///PORTD |= DIG_OUT_MASK;
     38          
     39               /// 2 задержка на xxxx тиков кварца
     40               __delay_cycles(SIGNAL_DELAY);
     41          
     42               /// 3 установим значение наших бит все 0
     43               PORTD &= ~((1<<PD5)|(1<<PD6)|(1<<PD7));
   \                     ??CrossCallReturnLabel_0:
   \   0000001A   B302               IN      R16, 0x12
   \   0000001C   710F               ANDI    R16, 0x1F
   \   0000001E   ....               RCALL   ?Subroutine0
     44               /// Вариант работы с маской
     45               ///PORTD |= ~DIG_OUT_MASK;
     46          
     47               /// 4 задержка на xxxx тиков кварца
     48               __delay_cycles(SIGNAL_DELAY);
   \                     ??CrossCallReturnLabel_1:
   \   00000020   CFF9               RJMP    ??main_0
     49          
     50               //// продолжая в том же духе можем получить
     51               /// замысловатый сигнал.....
     52            }
     53          }

   \                                 In segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   BB02               OUT     0x12, R16
   \   00000002   E201               LDI     R16, 33
   \   00000004   950A               DEC     R16
   \   00000006   F7F1               BRNE    $-2
   \   00000008   0000               NOP
   \   0000000A   9508               RET

   Maximum stack usage in bytes:

     Function CSTACK RSTACK
     -------- ------ ------
     main         0      2


   Segment part sizes:

     Function/Label Bytes
     -------------- -----
     _A_DDRD           1
     _A_PORTD          1
     _A_PORTC          1
     _A_PORTB          1
     main             34
     ?Subroutine0     12

 
  4 bytes in segment ABSOLUTE
 46 bytes in segment CODE
 
 46 bytes of CODE memory
  0 bytes of DATA memory (+ 4 bytes shared)

Errors: none
Warnings: none
