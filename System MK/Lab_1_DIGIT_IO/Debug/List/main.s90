//////////////////////////////////////////////////////////////////////////////
//                                                                           /
//                                                     29/Feb/2008  23:14:16 /
// IAR Atmel AVR C/C++ Compiler V4.20A/W32, Evaluation Version               /
// Copyright 1996-2006 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Source file  =  C:\Documents and Settings\Serg\SERG_DOCUM\_ПРГРАММА    /
//                    ИНСТИТУТ\LABORATOR_WORKS\Lab_1_DIGIT_IO\main.c         /
//    Command line =  "C:\Documents and Settings\Serg\SERG_DOCUM\_ПРГРАММА   /
//                    ИНСТИТУТ\LABORATOR_WORKS\Lab_1_DIGIT_IO\main.c"        /
//                    --cpu=m8 -mt -o "C:\Documents and                      /
//                    Settings\Serg\SERG_DOCUM\_ПРГРАММА                     /
//                    ИНСТИТУТ\LABORATOR_WORKS\Lab_1_DIGIT_IO\Debug\Obj\"    /
//                    -lCN "C:\Documents and Settings\Serg\SERG_DOCUM\_ПРГРА /
//                    ММА ИНСТИТУТ\LABORATOR_WORKS\Lab_1_DIGIT_IO\Debug\List /
//                    \" -lA "C:\Documents and Settings\Serg\SERG_DOCUM\_ПРГ /
//                    РАММА ИНСТИТУТ\LABORATOR_WORKS\Lab_1_DIGIT_IO\Debug\Li /
//                    st\" --initializers_in_flash -z9                       /
//                    --cross_call_passes=3 --debug                          /
//                    -DENABLE_BIT_DEFINITIONS --do_cross_call -e -I         /
//                    "C:\Program Files\IAR Systems\Embedded Workbench 4.0   /
//                    Evaluation\avr\INC\" -I "C:\Program Files\IAR          /
//                    Systems\Embedded Workbench 4.0                         /
//                    Evaluation\avr\INC\CLIB\" --eeprom_size 512            /
//    List file    =  C:\Documents and Settings\Serg\SERG_DOCUM\_ПРГРАММА    /
//                    ИНСТИТУТ\LABORATOR_WORKS\Lab_1_DIGIT_IO\Debug\List\mai /
//                    n.s90                                                  /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__cpu", "1"
        RTMODEL "__cpu_name", "ATmega8"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "1"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        PUBWEAK _A_DDRD
        PUBWEAK _A_PORTB
        PUBWEAK _A_PORTC
        PUBWEAK _A_PORTD
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBLIC main
        FUNCTION main,0a03H
        LOCFRAME RSTACK, 2, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_Y Y DATA
        CFI StackFrame CFA_SP SP DATA
        CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
        CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
        CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
        CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
        CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
        CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
        CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
        CFI ResourceParts SP SPH, SPL
        CFI ResourceParts Y R29, R28
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign 1
        CFI ReturnAddress ?Ret CODE
        CFI CFA_Y Y+0
        CFI CFA_SP SP+2
        CFI ?RetPad 0
        CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
        CFI ?RetLow Frame(CFA_SP, 0)
        CFI ?Ret Concat
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 SameValue
        CFI R13 SameValue
        CFI R14 SameValue
        CFI R15 SameValue
        CFI R16 Undefined
        CFI R17 Undefined
        CFI R18 Undefined
        CFI R19 Undefined
        CFI R20 Undefined
        CFI R21 Undefined
        CFI R22 Undefined
        CFI R23 Undefined
        CFI R24 SameValue
        CFI R25 SameValue
        CFI R26 SameValue
        CFI R27 SameValue
        CFI R28 Undefined
        CFI R29 Undefined
        CFI R30 Undefined
        CFI R31 Undefined
        CFI ?RetHighByteMask SameValue
        CFI SPH Undefined
        CFI SPL Undefined
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign 1
        CFI ReturnAddress ?Ret CODE
        CFI CFA_Y Notused
        CFI CFA_SP SP+2
        CFI ?RetPad 0
        CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
        CFI ?RetLow Frame(CFA_SP, 0)
        CFI ?Ret Concat
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 SameValue
        CFI R13 SameValue
        CFI R14 SameValue
        CFI R15 SameValue
        CFI R16 SameValue
        CFI R17 SameValue
        CFI R18 SameValue
        CFI R19 SameValue
        CFI R20 SameValue
        CFI R21 SameValue
        CFI R22 SameValue
        CFI R23 SameValue
        CFI R24 SameValue
        CFI R25 SameValue
        CFI R26 SameValue
        CFI R27 SameValue
        CFI R28 Undefined
        CFI R29 Undefined
        CFI R30 SameValue
        CFI R31 SameValue
        CFI ?RetHighByteMask SameValue
        CFI SPH Undefined
        CFI SPL Undefined
        CFI Y SameValue
        CFI EndCommon cfiCommon1
        
// C:\Documents and Settings\Serg\SERG_DOCUM\_ПРГРАММА ИНСТИТУТ\LABORATOR_WORKS\Lab_1_DIGIT_IO\main.c
//    1 #include "Header.h"

        ASEGN ABSOLUTE:DATA:NOROOT,031H
// union <unnamed> volatile __io _A_DDRD
_A_DDRD:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,032H
// union <unnamed> volatile __io _A_PORTD
_A_PORTD:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,035H
// union <unnamed> volatile __io _A_PORTC
_A_PORTC:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,038H
// union <unnamed> volatile __io _A_PORTB
_A_PORTB:
        DS 1
//    2 
//    3 //// задаемся задержкой на 100 тиков
//    4 #define SIGNAL_DELAY    100
//    5 
//    6 /// Можно определить маску для работы с нужными битами
//    7 #define DIG_OUT_MASK  ((1<<PD5)|(1<<PD6)|(1<<PD7))
//    8 
//    9 

        RSEG CODE:CODE:NOROOT(1)
//   10 void main( void )
main:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function main
//   11 {
//   12   /// включим подтяжку на всех выводах МК
//   13    PORTB = 0xFF;
        LDI     R16, 255
        OUT     0x18, R16
//   14    PORTC = 0xFF;
        OUT     0x15, R16
//   15    PORTD = 0xFF;
        OUT     0x12, R16
//   16   ///////////////////////////
//   17   /// Предварительная настройка портов
//   18   /// работаем с МК 1 к котрому прицеплены ЦАП и ключ силовой
//   19   /// Настроим биты порта PORTD 5,6,7
//   20 
//   21   /// определим направление - ВЫХОД
//   22   DDRD |= (1<<PD5)|(1<<PD6)|(1<<PD7);
        IN      R16, 0x11
        ORI     R16, 0xE0
        OUT     0x11, R16
//   23   /// предустановка бит порта - теперь они работают как источник 20мА
//   24   /// напряжение 5В
//   25   /// Вариант установки в 1 бит 5,6,7 не трогаем остальные биты порта
//   26   PORTD |= (1<<PD5)|(1<<PD6)|(1<<PD7);
        IN      R16, 0x12
        ORI     R16, 0xE0
        OUT     0x12, R16
//   27   /// в таком варианте остальные биты будут сброшены в лог.0
//   28   ///PORTD = (1<<PD5)|(1<<PD6)|(1<<PD7);
//   29 
//   30   ///////////////////////////
//   31   /// основной цикл
//   32   while(1){
//   33      /// 1 установим значение наших бит все 1
//   34      PORTD |= (1<<PD5)|(1<<PD6)|(1<<PD7);
??main_0:
        IN      R16, 0x12
        ORI     R16, 0xE0
        RCALL   ?Subroutine0
//   35 
//   36      /// Вариант работы с маской
//   37      ///PORTD |= DIG_OUT_MASK;
//   38 
//   39      /// 2 задержка на xxxx тиков кварца
//   40      __delay_cycles(SIGNAL_DELAY);
//   41 
//   42      /// 3 установим значение наших бит все 0
//   43      PORTD &= ~((1<<PD5)|(1<<PD6)|(1<<PD7));
??CrossCallReturnLabel_0:
        IN      R16, 0x12
        ANDI    R16, 0x1F
        RCALL   ?Subroutine0
//   44      /// Вариант работы с маской
//   45      ///PORTD |= ~DIG_OUT_MASK;
//   46 
//   47      /// 4 задержка на xxxx тиков кварца
//   48      __delay_cycles(SIGNAL_DELAY);
??CrossCallReturnLabel_1:
        RJMP    ??main_0
        CFI EndBlock cfiBlock0
//   49 
//   50      //// продолжая в том же духе можем получить
//   51      /// замысловатый сигнал.....
//   52   }
//   53 }

        RSEG CODE:CODE:NOROOT(1)
?Subroutine0:
        CFI Block cfiCond1 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI CFA_SP SP+4
        CFI Block cfiCond2 Using cfiCommon0
        CFI (cfiCond2) NoFunction
        CFI (cfiCond2) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond2) CFA_SP SP+4
        CFI Block cfiPicker3 Using cfiCommon1
        CFI (cfiPicker3) NoFunction
        CFI (cfiPicker3) Picker
        OUT     0x12, R16
        LDI     R16, 33
        DEC     R16
        BRNE    $-2
        NOP
        RET
        CFI EndBlock cfiCond1
        CFI EndBlock cfiCond2
        CFI EndBlock cfiPicker3

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        END
// 
//  4 bytes in segment ABSOLUTE
// 46 bytes in segment CODE
// 
// 46 bytes of CODE memory
//  0 bytes of DATA memory (+ 4 bytes shared)
//
//Errors: none
//Warnings: none
