##############################################################################
#                                                                            #
#                                                      09/Feb/2008  17:02:28 #
# IAR Atmel AVR C/C++ Compiler V4.20A/W32, Evaluation Version                #
# Copyright 1996-2006 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  C:\Documents and Settings\Serg\SERG_DOCUM\_œ–√–¿ÃÃ¿     #
#                    »Õ—“»“”“\LABORATOR_WORKS\Lab_1_DIGIT_IO\low_level_init. #
#                    c                                                       #
#    Command line =  "C:\Documents and Settings\Serg\SERG_DOCUM\_œ–√–¿ÃÃ¿    #
#                    »Õ—“»“”“\LABORATOR_WORKS\Lab_1_DIGIT_IO\low_level_init. #
#                    c" --cpu=m8 -mt -o "C:\Documents and                    #
#                    Settings\Serg\SERG_DOCUM\_œ–√–¿ÃÃ¿                      #
#                    »Õ—“»“”“\LABORATOR_WORKS\Lab_1_DIGIT_IO\Debug\Obj\"     #
#                    -lCN "C:\Documents and Settings\Serg\SERG_DOCUM\_œ–√–¿Ã #
#                    Ã¿ »Õ—“»“”“\LABORATOR_WORKS\Lab_1_DIGIT_IO\Debug\List\" #
#                     -lA "C:\Documents and Settings\Serg\SERG_DOCUM\_œ–√–¿Ã #
#                    Ã¿ »Õ—“»“”“\LABORATOR_WORKS\Lab_1_DIGIT_IO\Debug\List\" #
#                     --initializers_in_flash -z9 --cross_call_passes=3      #
#                    --debug -DENABLE_BIT_DEFINITIONS --do_cross_call -e -I  #
#                    "C:\Program Files\IAR Systems\Embedded Workbench 4.0    #
#                    Evaluation\avr\INC\" -I "C:\Program Files\IAR           #
#                    Systems\Embedded Workbench 4.0                          #
#                    Evaluation\avr\INC\CLIB\" --eeprom_size 512             #
#    List file    =  C:\Documents and Settings\Serg\SERG_DOCUM\_œ–√–¿ÃÃ¿     #
#                    »Õ—“»“”“\LABORATOR_WORKS\Lab_1_DIGIT_IO\Debug\List\low_ #
#                    level_init.lst                                          #
#    Object file  =  C:\Documents and Settings\Serg\SERG_DOCUM\_œ–√–¿ÃÃ¿     #
#                    »Õ—“»“”“\LABORATOR_WORKS\Lab_1_DIGIT_IO\Debug\Obj\low_l #
#                    evel_init.r90                                           #
#                                                                            #
#                                                                            #
##############################################################################

C:\Documents and Settings\Serg\SERG_DOCUM\_œ–√–¿ÃÃ¿ »Õ—“»“”“\LABORATOR_WORKS\Lab_1_DIGIT_IO\low_level_init.c
      1          /**************************************************************
      2           **             - __low_level_init.c -
      3           **
      4           **     Special initializations that are performed before
      5           **     segment initialization. It is also possible to
      6           **     completely block the normal segment initialization.
      7           **
      8           **     Used with iccAVR.
      9           **
     10           **     $Revision: 1.2 $
     11           **
     12           **************************************************************/
     13          #include <inavr.h>
     14          
     15          //// ÔÓ‰ÍÎ˛˜ËÏ ‚ÒÂ ˜ÚÓ ÌÛÊÌÓ...
     16          //// Á‡‰‡ÂÏÒˇ ÍÓÌÚÓÎÎÂÓÏ Ò ÍÓÚÓ˚Ï ‡·ÓÚ‡ÂÏ
     17          #include "Header.h"

   \                                 In segment ABSOLUTE, at 0x32
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS 1

   \                                 In segment ABSOLUTE, at 0x35
   \   union <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS 1

   \                                 In segment ABSOLUTE, at 0x38
   \   union <unnamed> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS 1
     18          
     19          extern void *__RSTACK_in_external_ram;
     20          
     21          /**************************************************************
     22           **
     23           ** How to implement a low-level initialization function in C
     24           ** =========================================================
     25           **
     26           ** 1) Only use local auto variables.
     27           ** 2) Don't use global or static variables.
     28           ** 3) Don't use global or static objects (EC++ only).
     29           ** 4) Don't use agregate initializers, e.g. struct a b = {1};
     30           ** 5) Don't call any library functions (function calls that
     31           **    the compiler generates, e.g. to do integer math, are OK).
     32           ** 6) Setup the RSTACK as is appropriate! See code below.
     33           **
     34           **************************************************************/
     35          #ifdef __cplusplus
     36          extern "C" {
     37          #endif

   \                                 In segment CODE, align 2, keep-with-next
     38          char __low_level_init()
   \                     __low_level_init:
     39          {
     40            /* Uncomment the statement below if the RSTACK */
     41            /* segment has been placed in external SRAM!   */
     42          
     43            /* __require(__RSTACK_in_external_ram); */
     44          
     45            /* If the low-level initialization routine is  */
     46            /* written in assembler, the line above should */
     47            /* be written as:                              */
     48            /*     EXTERN  __RSTACK_in_external_ram        */
     49            /*     REQUIRE __RSTACK_in_external_ram        */
     50          
     51            /* Add your custom setup here. */
     52            ////////////////////////////////////////
     53            /// Ì‡ÒÚÓËÏ ÔÓÚ˚ ‰Îˇ ‡·ÓÚ˚
     54             PORTB = 0xFF;
   \   00000000   EF0F               LDI     R16, 255
   \   00000002   BB08               OUT     0x18, R16
     55             PORTC = 0xFF;
   \   00000004   BB05               OUT     0x15, R16
     56             PORTD = 0xFF;
   \   00000006   BB02               OUT     0x12, R16
     57          
     58            /* Return 1 to indicate that normal segment */
     59            /* initialization should be performed. If   */
     60            /* normal segment initialization should not */
     61            /* be performed, return 0.                  */
     62            return 1;
   \   00000008   E001               LDI     R16, 1
   \   0000000A   9508               RET
     63          }
     64          #ifdef __cplusplus
     65          }
     66          #endif
     67          

   Maximum stack usage in bytes:

     Function         CSTACK RSTACK
     --------         ------ ------
     __low_level_init     0      2


   Segment part sizes:

     Function/Label   Bytes
     --------------   -----
     _A_PORTD            1
     _A_PORTC            1
     _A_PORTB            1
     __low_level_init   12

 
  3 bytes in segment ABSOLUTE
 12 bytes in segment CODE
 
 12 bytes of CODE memory
  0 bytes of DATA memory (+ 3 bytes shared)

Errors: none
Warnings: none
